1)	Что такое функция и как ее объявить?
- многократно используемые фрагменты программы, определенные блоки команд с именем, которые можно запускать в любом
месте программы и много раз.
- объекты, принимающие какие-либо параметры и возвращающие значение.
Бывают встроенные и пользовательские. Пользовательские объявляют с помощью инструкции def

2)	Как создать функцию?
- объявляется инструкция def >> имя функции и () >> в скобки передаются параметры, если есть, и двоеточие.
Далее следует тело функции с отступом

3)	Как показать что созданная функция возвращает результат?
- с помощью оператора return

4)	В чем разница между параметрами и аргументами функции?
- параметры передаются в функцию при ее объявлении, аргументы - значения, которые передаются в функцию при ее вызове

5)	Как рекурсивные функции работают в Python?
- Они вызывают сами себя, в их теле должно присутствовать условие, которое завершит рекурсию, т.е. закончит вычисление
и вернет результат

6)	Что такое декораторы функций и как они используются? ( привести свой пример декоратора)
- это функции которые могут обернуть другую функцию для расширения ее функциональности без изменения ее кода.
Запускаются с помощью знака @ и названия функции-декоратора, далее объявляется функция, которую нужно изменить.
def f1(function):
    def wrapper():
        print('Started')
        function()
        print('Ended')
    return wrapper

@f1
def func():
    print('Hi')

func()

7)	Как расшифровывается ООП?
- Объектно-ориентированное программирование

8)	Что относится к основным принципам(парадигмам) ООП?
- их 4: инкапсуляция, наследование, полиморфизми и абстракция.

9)	Что будет результатом программы и почему?
class Test:
    test = None

print(Test.test)

>>> None, здесь ссылка на переменную класса, его значение None

10)	Какой принцип ООП описывает следующее предложение? Этот принцип является способностью использовать общий интерфейс
для нескольких форм (типов данных).
- полиморфизм

11)	Какой из перечисленных вариантов является верным объявлением private поля?
●	private field = 0
●	field = 0
●	_field = 0
●	__field = 0

>>> __field = 0

12)	Как создать конструктор класса?
- с помощью двойного подчеркивания в начале и конце метода. Методы __init__, __new__ являются конструкторами класса и
отличаются тем, что они отвечают за операцию создания объекта класса: 1й за инициализацию, 2й - за создание адреса


13)	Как много конструкторов в классе может иметь Python?
-  один  - __init__

14)	Что будет результатом данной программы:
class Test:
    def print_text(self):
        print('Это родительский класс Test')

class Test2(Test):
    def print_text(self):
        print('Это класс потомок Test2')

test = Test2()
test.print_text()

>>> Это класс потомок Test2

15)	Какой параметр обязательно принимает в себя метод экземпляра?
●	тип объекта
●	сам экземпляр класса
●	название класса
●	таких аргументов нет

>>> сам экземпляр класса

16)	Как использовать инкапсуляцию для защиты данных в классах?
- поставить двойное подчеркивания перед методом - тогда атрибут не доступен по этому имени
или одиночное: тогда доступен, но не доступен вне методов класса

17)	Какая разница между абстрактными классами и интерфейсами в Python?
- Абстрактные классы определяют те свойства и методы, которые нужны для выполнения конкретной задачи, имеют частичную
реализацию, как это делают подклассы. Интерфейсы объявляют те методы, которые могут реализовыватся классами, от них
можно наследоваться.

18)	Как показать в классе что метод является абстрактым?
- с помощью декоратора abc.abstractmethod

19)	Что будет результатом программы?
class Test:
    __test = 0

print(Test.__test)

>>> ошибка атрибута

20)	Что делает финализатор класса?
- вызывается перед удалением экземпляра класса и удаляет его

21)	Распишите работу магических методов: new, call
- метод __new__ создает объект в памяти устройства (его адрес), вызывается перед созданием объекта класса, принимает
параметры cls, *args, *kwargs:
def __new__(cls,*args, *kwargs)
- метод __call__ автоматически запускается, когда вызывается класс, ему могут быть переданы аргументы. Этот метод делает
экземпляр класса вызываемым, объект класса може быть вызван как функция. При вызове объекта как функции, будет
исполнен код внутри метода __call__.

22)	Если в классе определены два метода с одинаковыми именами и разными списками параметров, что будет результатом?
- второе  определение метода заменит первое. При вызове нужно будет передать количество параметров второго метода, иначе
выдаст ошибку.

23)	Значением поля класса по умолчанию может являться?
●	значение переменной
●	константа
●	результат вызова функции
●	возможность указания значений полей по умолчанию в Python не предусмотрена

>>> значение переменной

24)	Укажите результат выполнения скрипта и почему:
class Foo:
    count = x

    def __init__(self):
        self.count += 1

    def __del(self):
        self.count += 1

obj = Foo()
print(obj.count)

>>> ошибка, так как не может определить тип значения переменной count

25)	Как указать в программе что класс A наследуется от B?
>>> class A(B)